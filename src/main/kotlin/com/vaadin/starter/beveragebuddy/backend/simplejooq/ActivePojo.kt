package com.vaadin.starter.beveragebuddy.backend.simplejooq

import jakarta.validation.ConstraintViolationException
import org.jooq.Configuration
import org.jooq.UpdatableRecord
import org.jooq.impl.DAOImpl

/**
 * An Active POJO: it is able to perform basic CRUD operations.
 */
interface ActivePojo<R : UpdatableRecord<R>, THIS : Any, ID : Any> {
    fun dao(cfg: Configuration? = currentConfiguration()): DAOImpl<R, THIS, ID>

    @Suppress("UNCHECKED_CAST")
    private fun self(): THIS = this as THIS

    private fun getId(): ID? = dao(null).getId(self())

    /**
     * Checks if this POJO is persistent (has a non-null ID).
     */
    val isPersistent: Boolean get() = getId() != null

    /**
     * Always issues the database `INSERT`, even if the `id` is not null. This is useful for two cases:
     *  * When the entity has a natural ID, such as a NaturalPerson with ID pre-provided by the government (social security number etc),
     *  * ID auto-generated by the application, e.g. UUID
     *
     * It is possible to use this function with entities with IDs auto-generated by the database, but it may be simpler to
     * simply use [save].
     */
    fun create(validate: Boolean = true) {
        if (validate) {
            validate()
        }
        db { dao().insert(self()) }
        check(isPersistent) { "ID has not been filled into the POJO" }
    }

    fun save(validate: Boolean = true) {
        if (!isPersistent) {
            create(validate)
        } else {
            if (validate) {
                validate()
            }
            db { dao().merge(self()) }
            check(isPersistent) { "ID has not been filled into the POJO" }
        }
    }

    /**
     * Deletes this entity from the database. Fails if [isPersistent] is false,
     * since it is expected that the entity is already in the database.
     */
    fun delete() {
        check(isPersistent) { "POJO not yet persistent" }
        db { dao().deleteById(getId()!!) }
    }

    /**
     * Validates current entity. The Java JSR303 validation is performed by default: just add `jakarta.validation`
     * annotations to entity properties.
     *
     * Make sure to add the validation annotations to
     * fields or getters otherwise they will be ignored. For example `@field:NotNull` or `@get:NotNull`.
     *
     * You can override this method to perform additional validations on the level of the entire entity.
     *
     * @throws jakarta.validation.ValidationException when validation fails.
     */
    fun validate() {
        val violations = SimpleJooq.validator.validate<Any>(this)
        if (violations.isNotEmpty()) {
            throw ConstraintViolationException(violations)
        }
    }

    /**
     * Checks whether this entity is valid: calls [validate] and returns false if [ConstraintViolationException] is thrown.
     */
    val isValid: Boolean
        get() = try {
            validate()
            true
        } catch (ex: ConstraintViolationException) {
            false
        }
}
